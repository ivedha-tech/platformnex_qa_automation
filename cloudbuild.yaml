steps:
  # Install dependencies and system packages in one step
  - name: 'node:18'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Install system dependencies
        apt-get update && apt-get install -y \
        libnss3 \
        libatk-bridge2.0-0 \
        libdrm2 \
        libxkbcommon0 \
        libxcomposite1 \
        libxdamage1 \
        libxrandr2 \
        libgbm1 \
        libxss1 \
        libasound2 \
        libatspi2.0-0 \
        libgtk-3-0 \
        libgdk-pixbuf2.0-0 \
        libx11-6 \
        libx11-xcb1 \
        libxcb1 \
        libxext6 \
        libxfixes3 \
        libxi6 \
        libxrender1 \
        libxtst6 \
        libxrandr2 \
        libxss1 \
        libgconf-2-4 \
        libnss3-dev \
        libxss1 \
        libgconf-2-4 \
        libxtst6 \
        libxrandr2 \
        libasound2 \
        libpangocairo-1.0-0 \
        libatk1.0-0 \
        libcairo-gobject2 \
        libgtk-3-0 \
        libgdk-pixbuf2.0-0
        
        # Install npm dependencies
        npm install
        
        # Install Playwright browsers
        npx playwright install chromium
    dir: '.'
    id: 'install-all'

  # Run Playwright tests in headless mode
  - name: 'node:18'
    entrypoint: 'npx'
    args: ['playwright', 'test', '--reporter=html', '--reporter=list']
    dir: '.'
    id: 'run-tests'
    waitFor: ['install-all']
    env:
      - 'CI=true'

  # Create timestamp for report organization
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Build ID: ${BUILD_ID}"
        echo "Build timestamp: $(date)"
        echo "Commit SHA: ${COMMIT_SHA}"
        echo "Branch: ${BRANCH_NAME}"
    id: 'build-info'

  # Upload test results to GCS bucket
  - name: 'gcr.io/cloud-builders/gsutil'
    args: [
      'cp',
      '-r',
      'test-results',
      'gs://${_BUCKET_NAME}/test-reports/${BUILD_ID}/test-results/'
    ]
    id: 'upload-test-results'
    waitFor: ['run-tests']

  # Upload HTML report to GCS bucket
  - name: 'gcr.io/cloud-builders/gsutil'
    args: [
      'cp',
      '-r',
      'reports',
      'gs://${_BUCKET_NAME}/test-reports/${BUILD_ID}/reports/'
    ]
    id: 'upload-reports'
    waitFor: ['run-tests']

  # Create index file with build information
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        cat > build-info.json << EOF
        {
          "buildId": "${BUILD_ID}",
          "commitSha": "${COMMIT_SHA}",
          "branchName": "${BRANCH_NAME}",
          "buildTimestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "testReportUrl": "https://storage.googleapis.com/${_BUCKET_NAME}/test-reports/${BUILD_ID}/reports/test-report.html"
        }
        EOF
    id: 'create-build-info'

  # Upload build info
  - name: 'gcr.io/cloud-builders/gsutil'
    args: [
      'cp',
      'build-info.json',
      'gs://${_BUCKET_NAME}/test-reports/${BUILD_ID}/'
    ]
    id: 'upload-build-info'
    waitFor: ['create-build-info']

  # Make reports publicly accessible (optional)
  - name: 'gcr.io/cloud-builders/gsutil'
    args: [
      'acl',
      'ch',
      '-r',
      '-u',
      'AllUsers:R',
      'gs://${_BUCKET_NAME}/test-reports/${BUILD_ID}/'
    ]
    id: 'make-public'
    waitFor: ['upload-test-results', 'upload-reports', 'upload-build-info']

# Substitution variables
substitutions:
  _BUCKET_NAME: 'platformnex-test-reports'

# Build options
options:
  machineType: 'E2_HIGHCPU_8'
  diskSizeGb: 100
  logging: CLOUD_LOGGING_ONLY

# Timeout for the entire build
timeout: '4000s'

# Store artifacts
artifacts:
  objects:
    location: 'gs://${_BUCKET_NAME}/test-reports/${BUILD_ID}/'
    paths: ['test-results/**/*', 'reports/**/*']
